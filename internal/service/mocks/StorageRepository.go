// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "Tasks/internal/model"
)

// StorageRepository is an autogenerated mock type for the StorageRepository type
type StorageRepository struct {
	mock.Mock
}

// AddNewUserTask provides a mock function with given fields: ctx, userID, taskID
func (_m *StorageRepository) AddNewUserTask(ctx context.Context, userID int, taskID int) error {
	ret := _m.Called(ctx, userID, taskID)

	if len(ret) == 0 {
		panic("no return value specified for AddNewUserTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, userID, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNewTask provides a mock function with given fields: ctx, task
func (_m *StorageRepository) CreateNewTask(ctx context.Context, task model.Task) (int, error) {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewTask")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Task) (int, error)); ok {
		return rf(ctx, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Task) int); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: ctx, taskID
func (_m *StorageRepository) DeleteTask(ctx context.Context, taskID int) error {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTasks provides a mock function with given fields: ctx, userID
func (_m *StorageRepository) GetAllTasks(ctx context.Context, userID int) ([]model.Task, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTasks")
	}

	var r0 []model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]model.Task, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []model.Task); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUsersWorkTask provides a mock function with given fields: ctx, taskID
func (_m *StorageRepository) GetAllUsersWorkTask(ctx context.Context, taskID int) ([]model.User, error) {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsersWorkTask")
	}

	var r0 []model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]model.User, error)); ok {
		return rf(ctx, taskID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []model.User); ok {
		r0 = rf(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveUserFromTask provides a mock function with given fields: ctx, userID, taskID
func (_m *StorageRepository) RemoveUserFromTask(ctx context.Context, userID int, taskID int) error {
	ret := _m.Called(ctx, userID, taskID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, userID, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaskByID provides a mock function with given fields: ctx, taskID
func (_m *StorageRepository) TaskByID(ctx context.Context, taskID int) (model.Task, error) {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for TaskByID")
	}

	var r0 model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (model.Task, error)); ok {
		return rf(ctx, taskID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) model.Task); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Get(0).(model.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskShortDeadline provides a mock function with given fields: ctx, userID
func (_m *StorageRepository) TaskShortDeadline(ctx context.Context, userID int) ([]model.Task, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for TaskShortDeadline")
	}

	var r0 []model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]model.Task, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []model.Task); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskUpdateStatus provides a mock function with given fields: ctx, newStatus, taskID
func (_m *StorageRepository) TaskUpdateStatus(ctx context.Context, newStatus string, taskID int) error {
	ret := _m.Called(ctx, newStatus, taskID)

	if len(ret) == 0 {
		panic("no return value specified for TaskUpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, newStatus, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserByID provides a mock function with given fields: ctx, taskID
func (_m *StorageRepository) UserByID(ctx context.Context, taskID int) ([]int, error) {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for UserByID")
	}

	var r0 []int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]int, error)); ok {
		return rf(ctx, taskID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []int); ok {
		r0 = rf(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStorageRepository creates a new instance of StorageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageRepository {
	mock := &StorageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
